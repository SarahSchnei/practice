import pandas as pd

df = pd.read_csv('winequality-red.csv', delimiter = ';')

label = df['quality']

features = df.drop('quality', axis=1)

import numpy as np
from sklearn import linear_model

regr = linear_model.LinearRegression()
regr.fit(features, label)

print(regr.predict([[7.4,0.66,0,1.8,0.075,13,40,0.9978,3.51,0.56,9.4]]).tolist())

import pickle

pickle.dump(regr, open("model.pkl","wb"))

minch = pickle.load(open("model.pkl", "rb"))

import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/hello', methods=['POST'])
def index():
    name = request.get_json()['name']
    return "Hello" + name

model = pickle.load(open("model.pkl", "rb"))

@app.route('/predict', methods=['POST'])

def predict():
    feature_array = request.get_json()['feature_array']

    prediction = model.predict([feature_array]).tolist()

    response = {}
    response['predictions'] = prediction
    return flask.jsonify(response)

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn import linear_model
print("ready2geaux")

df = pd.read_csv('winequality-red.csv', delimiter=";")
X_train, X_test, y_train, y_test = train_test_split(df.drop('quality', axis=1), df['quality'], test_size=0.25, random_state=1)

regr = linear_model.RidgeCV(alphas= np.arange(0.1,10.0,.5))
regr.fit(X_train, y_train)

pickle.dump(regr,open("model.pkl","wb"))

ans = regr.predict(X_test)
print(ans)
print("MSE is: ", mean_squared_error(y_test, ans))
##### so this model is .384 unsure of it's prediction of a good wine. Not bad in my humble opinion.

for b in ans <5:
    if b:
        print("bad")
    else:
        print("good")

df['ans']= pd.Series(ans)
df['rank'] = np.where(df.ans <5, 'Good', np.where(df.ans >5, 'bad', 'ok'))
print(df)
